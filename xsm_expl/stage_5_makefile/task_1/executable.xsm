0
2056
0
0
0
0
0
0
BRKP
MOV SP, 4197
PUSH R0 //retVal for main
CALL MAIN
F0:
PUSH BP //save old BP
MOV BP, SP //set new BP
PUSH R0 //push space for loc var
MOV R1, -3
ADD R1, BP
MOV R0, [R1]
MOV R1, 0
EQ R0, R1
JZ R0, L0
MOV R0, 0
MOV R2, 1
ADD R2, BP
MOV [R2], R0
JMP L1
L0:
MOV R1, -3
ADD R1, BP
MOV R0, [R1]
MOV R1, 1
EQ R0, R1
JZ R0, L2
MOV R0, 1
MOV R2, 1
ADD R2, BP
MOV [R2], R0
JMP L3
L2:
MOV R1, -3
ADD R1, BP
MOV R0, [R1]
MOV R1, 1
SUB R0, R1
PUSH R0 //pushing argument
PUSH R0 //retVal
CALL F0
POP R0 //store result
POP R1 //pop argument
PUSH R0 //push reg in use
MOV R2, -3
ADD R2, BP
MOV R1, [R2]
MOV R2, 2
SUB R1, R2
PUSH R1 //pushing argument
PUSH R0 //retVal
CALL F0
POP R1 //store result
POP R2 //pop argument
POP R0 //restore reg in use
ADD R0, R1
MOV R2, 1
ADD R2, BP
MOV [R2], R0
L3:
L1:
MOV R2, 1
ADD R2, BP
MOV R1, [R2]
MOV R0, BP
SUB R0, 2
MOV [R0], R1 //store return val
POP R0 //pop loc var
MOV BP, [BP]
POP R0 //reset BP
RET
MAIN:
PUSH BP //set new BP
MOV BP, SP //set new BP
PUSH R0 //space for loc var
MOV R1, "Read"
PUSH R1
MOV R1, "-1"
PUSH R1
MOV R1, 4096
PUSH R1
PUSH R0
PUSH R0
CALL 0
POP R0
POP R0
POP R0
POP R0
POP R0
PUSH R0 //push reg in use
MOV R1, [4096]
PUSH R1 //pushing argument
PUSH R0 //retVal
CALL F0
POP R1 //store result
POP R2 //pop argument
POP R0 //restore reg in use
MOV R3, 1
ADD R3, BP
MOV [R3], R1
MOV R0, "Write"
PUSH R0
MOV R0, "-2"
PUSH R0
MOV R2, 1
ADD R2, BP
MOV R1, [R2]
PUSH R1
PUSH R0
PUSH R0
CALL 0
POP R0
POP R0
POP R0
POP R0
POP R0
MOV R0, 0
MOV R1, "Exit"
PUSH R1
PUSH R0
PUSH R0
PUSH R0
PUSH R0
CALL 0
