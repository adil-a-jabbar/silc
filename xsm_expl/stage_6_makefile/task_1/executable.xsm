0
2056
0
0
0
0
0
0
BRKP
MOV SP, 4197
MOV R0, "Heapset"
PUSH R0
PUSH R0
PUSH R0
PUSH R0
PUSH R0
CALL 0
POP R0
POP R0
POP R0
POP R0
POP R0
PUSH R0 //retVal for main
CALL MAIN
F0:
PUSH BP //save old BP
MOV BP, SP //set new BP
MOV R1, -4
ADD R1, BP
MOV R0, [R1]
MOV R1, -999999
EQ R0, R1
JZ R0, L0
BRKP
MOV R0, "Alloc"
PUSH R0
MOV R0, 3
PUSH R0
PUSH R0
PUSH R0
PUSH R0
CALL 0
POP R1
POP R0
POP R0
POP R0
POP R0
MOV R2, -4
ADD R2, BP
MOV [R2], R1
MOV R1, -3
ADD R1, BP
MOV R0, [R1]
MOV R3, -4
ADD R3, BP
MOV R2, [R3]
ADD R2, 1
MOV [R2], R0
MOV R0, -999999
MOV R3, -4
ADD R3, BP
MOV R2, [R3]
ADD R2, 2
MOV [R2], R0
MOV R0, -999999
MOV R3, -4
ADD R3, BP
MOV R2, [R3]
ADD R2, 3
MOV [R2], R0
JMP L1
L0:
MOV R1, -3
ADD R1, BP
MOV R0, [R1]
MOV R2, -4
ADD R2, BP
MOV R1, [R2]
ADD R1, 1
MOV R1, [R1]
LT R0, R1
JZ R0, L2
MOV R1, -4
ADD R1, BP
MOV R0, [R1]
ADD R0, 2
MOV R0, [R0]
PUSH R0 //pushing argument
MOV R1, -3
ADD R1, BP
MOV R0, [R1]
PUSH R0 //pushing argument
PUSH R0 //retVal
CALL F0
POP R0 //store result
POP R1 //pop argument
POP R1 //pop argument
MOV R3, -4
ADD R3, BP
MOV R2, [R3]
ADD R2, 2
MOV [R2], R0
JMP L3
L2:
MOV R1, -3
ADD R1, BP
MOV R0, [R1]
MOV R2, -4
ADD R2, BP
MOV R1, [R2]
ADD R1, 1
MOV R1, [R1]
GT R0, R1
JZ R0, L4
MOV R1, -4
ADD R1, BP
MOV R0, [R1]
ADD R0, 3
MOV R0, [R0]
PUSH R0 //pushing argument
MOV R1, -3
ADD R1, BP
MOV R0, [R1]
PUSH R0 //pushing argument
PUSH R0 //retVal
CALL F0
POP R0 //store result
POP R1 //pop argument
POP R1 //pop argument
MOV R3, -4
ADD R3, BP
MOV R2, [R3]
ADD R2, 3
MOV [R2], R0
L4:
L3:
L1:
MOV R1, -4
ADD R1, BP
MOV R0, [R1]
MOV R3, -4
ADD R3, BP
MOV R2, [R3]
MOV R1, BP
SUB R1, 2
MOV [R1], R2 //store return val
MOV BP, [BP]
POP R0 //reset BP
RET
F1:
PUSH BP //save old BP
MOV BP, SP //set new BP
MOV R3, -3
ADD R3, BP
MOV R2, [R3]
MOV R3, -999999
NE R2, R3
JZ R2, L5
PUSH R0 //push reg in use
PUSH R1 //push reg in use
MOV R3, -3
ADD R3, BP
MOV R2, [R3]
ADD R2, 2
MOV R2, [R2]
PUSH R2 //pushing argument
PUSH R0 //retVal
CALL F1
POP R2 //store result
POP R3 //pop argument
POP R1 //restore reg in use
POP R0 //restore reg in use
MOV [4096], R2
MOV R1, "Write"
PUSH R1
MOV R1, "-2"
PUSH R1
MOV R3, -3
ADD R3, BP
MOV R2, [R3]
ADD R2, 1
MOV R2, [R2]
PUSH R2
PUSH R0
PUSH R0
CALL 0
POP R0
POP R0
POP R0
POP R0
POP R0
PUSH R0 //push reg in use
MOV R2, -3
ADD R2, BP
MOV R1, [R2]
ADD R1, 3
MOV R1, [R1]
PUSH R1 //pushing argument
PUSH R0 //retVal
CALL F1
POP R1 //store result
POP R2 //pop argument
POP R0 //restore reg in use
MOV [4096], R1
L5:
MOV R0, 1
MOV R2, 1
MOV R1, BP
SUB R1, 2
MOV [R1], R2 //store return val
MOV BP, [BP]
POP R0 //reset BP
RET
F2:
PUSH BP //save old BP
MOV BP, SP //set new BP
MOV R3, -3
ADD R3, BP
MOV R2, [R3]
MOV R3, -999999
NE R2, R3
JZ R2, L6
MOV R2, "Write"
PUSH R2
MOV R2, "-2"
PUSH R2
MOV R4, -3
ADD R4, BP
MOV R3, [R4]
ADD R3, 1
MOV R3, [R3]
PUSH R3
PUSH R0
PUSH R0
CALL 0
POP R0
POP R0
POP R0
POP R0
POP R0
PUSH R0 //push reg in use
PUSH R1 //push reg in use
MOV R3, -3
ADD R3, BP
MOV R2, [R3]
ADD R2, 2
MOV R2, [R2]
PUSH R2 //pushing argument
PUSH R0 //retVal
CALL F2
POP R2 //store result
POP R3 //pop argument
POP R1 //restore reg in use
POP R0 //restore reg in use
MOV [4096], R2
PUSH R0 //push reg in use
MOV R2, -3
ADD R2, BP
MOV R1, [R2]
ADD R1, 3
MOV R1, [R1]
PUSH R1 //pushing argument
PUSH R0 //retVal
CALL F2
POP R1 //store result
POP R2 //pop argument
POP R0 //restore reg in use
MOV [4096], R1
L6:
MOV R0, 1
MOV R2, 1
MOV R1, BP
SUB R1, 2
MOV [R1], R2 //store return val
MOV BP, [BP]
POP R0 //reset BP
RET
F3:
PUSH BP //save old BP
MOV BP, SP //set new BP
MOV R3, -3
ADD R3, BP
MOV R2, [R3]
MOV R3, -999999
NE R2, R3
JZ R2, L7
PUSH R0 //push reg in use
PUSH R1 //push reg in use
MOV R3, -3
ADD R3, BP
MOV R2, [R3]
ADD R2, 2
MOV R2, [R2]
PUSH R2 //pushing argument
PUSH R0 //retVal
CALL F3
POP R2 //store result
POP R3 //pop argument
POP R1 //restore reg in use
POP R0 //restore reg in use
MOV [4096], R2
PUSH R0 //push reg in use
MOV R2, -3
ADD R2, BP
MOV R1, [R2]
ADD R1, 3
MOV R1, [R1]
PUSH R1 //pushing argument
PUSH R0 //retVal
CALL F3
POP R1 //store result
POP R2 //pop argument
POP R0 //restore reg in use
MOV [4096], R1
MOV R0, "Write"
PUSH R0
MOV R0, "-2"
PUSH R0
MOV R2, -3
ADD R2, BP
MOV R1, [R2]
ADD R1, 1
MOV R1, [R1]
PUSH R1
PUSH R0
PUSH R0
CALL 0
POP R0
POP R0
POP R0
POP R0
POP R0
L7:
MOV R0, 1
MOV R2, 1
MOV R1, BP
SUB R1, 2
MOV [R1], R2 //store return val
MOV BP, [BP]
POP R0 //reset BP
RET
MAIN:
PUSH BP //set new BP
MOV BP, SP //set new BP
PUSH R0 //space for loc var
PUSH R0 //space for loc var
PUSH R0 //space for loc var
MOV R2, "Heapset"
PUSH R2
PUSH R2
PUSH R2
PUSH R2
PUSH R2
CALL 0
POP R3
POP R2
POP R2
POP R2
POP R2
MOV R4, 1
ADD R4, BP
MOV [R4], R3
MOV R1, -999999
MOV R3, 3
ADD R3, BP
MOV [R3], R1
MOV R0, "Read"
PUSH R0
MOV R0, "-1"
PUSH R0
MOV R0, 1
ADD R0, BP
PUSH R0
PUSH R0
PUSH R0
CALL 0
POP R0
POP R0
POP R0
POP R0
POP R0
L8:
MOV R1, 1
ADD R1, BP
MOV R0, [R1]
MOV R1, 0
NE R0, R1
JZ R0, L9
MOV R1, 3
ADD R1, BP
MOV R0, [R1]
PUSH R0 //pushing argument
MOV R1, 1
ADD R1, BP
MOV R0, [R1]
PUSH R0 //pushing argument
PUSH R0 //retVal
CALL F0
POP R0 //store result
POP R1 //pop argument
POP R1 //pop argument
MOV R2, 3
ADD R2, BP
MOV [R2], R0
MOV R0, "Read"
PUSH R0
MOV R0, "-1"
PUSH R0
MOV R0, 1
ADD R0, BP
PUSH R0
PUSH R0
PUSH R0
CALL 0
POP R0
POP R0
POP R0
POP R0
POP R0
JMP L8
L9:
MOV R1, 3
ADD R1, BP
MOV R0, [R1]
PUSH R0 //pushing argument
PUSH R0 //retVal
CALL F1
POP R0 //store result
POP R1 //pop argument
MOV [4096], R0
MOV R1, 3
ADD R1, BP
MOV R0, [R1]
PUSH R0 //pushing argument
PUSH R0 //retVal
CALL F2
POP R0 //store result
POP R1 //pop argument
MOV [4096], R0
MOV R1, 3
ADD R1, BP
MOV R0, [R1]
PUSH R0 //pushing argument
PUSH R0 //retVal
CALL F3
POP R0 //store result
POP R1 //pop argument
MOV [4096], R0
MOV R0, 9
MOV R1, 9
MOV R2, "Exit"
PUSH R2
PUSH R0
PUSH R0
PUSH R0
PUSH R0
CALL 0
